pipeline {
    agent any

    environment {
        MINIO_URL = "http://minio:9000"
        BUCKET_NAME = "models"
        NEXUS_HOST = "localhost"
        NEXUS_DOCKER_PORT = "8082"  
        DOCKER_REPO_NAME = "docker-hosted"
        REGISTRY = "${NEXUS_HOST}:${NEXUS_DOCKER_PORT}"  
        HUGGINGFACE_API_TOKEN = credentials('huggingface-token')
        DOCKER_HOST = "unix:///var/run/docker.sock"
        BUILD_DATE = sh(script: 'date +%Y%m%d', returnStdout: true).trim()
    }

    stages {
        stage('–°—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏') {
            steps {
                script {
                    def modelConfig = readYaml file: 'model-config.yaml'
                    env.MODEL_NAME = modelConfig.model_name ?: "bert-tiny"
                    env.HF_REPO = modelConfig.huggingface_repo ?: "prajjwal1/bert-tiny"
                    env.IMAGE_TAG = "${BUILD_DATE}-latest"
                    env.IMAGE_NAME = "ml-model-${env.MODEL_NAME}" 
                    echo "Using model: ${env.MODEL_NAME} from repo: ${env.HF_REPO}"
                }
            }
        }

        stage('–°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ Hugging Face') {
            steps {
                script {
                    sh """
                        mkdir -p models/${env.MODEL_NAME}
                        set -e

                        for file in pytorch_model.bin config.json vocab.txt; do
                            curl -f -H "Authorization: Bearer ${HUGGINGFACE_API_TOKEN}" \
                                -L https://huggingface.co/${env.HF_REPO}/resolve/main/\$file \
                                -o models/${env.MODEL_NAME}/\$file
                        done
                    """
                    echo "–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–ª –º–æ–¥–µ–ª—å: ${env.MODEL_NAME}"
                }
            }
        }

        stage('–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ MinIO') {
            steps {
                script {
                    def modelPath = "${WORKSPACE}/models/${env.MODEL_NAME}"
                    def modelFiles = sh(script: "ls -A ${modelPath} | wc -l", returnStdout: true).trim()

                    if (modelFiles.toInteger() == 0) {
                        error("–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ –ø—É—Å—Ç–∞! –í—ã—Ö–æ–¥–∏–º..")
                    }

                    withCredentials([usernamePassword(credentialsId: 'minio-credentials', usernameVariable: 'MINIO_USER', passwordVariable: 'MINIO_PASS')]) {
                        sh """
                            /usr/local/bin/mc alias set myminio ${MINIO_URL} ${MINIO_USER} ${MINIO_PASS} --quiet || true

                            if ! /usr/local/bin/mc ls myminio/${BUCKET_NAME} >/dev/null 2>&1; then
                                echo "Creating bucket ${BUCKET_NAME}..."
                                /usr/local/bin/mc mb myminio/${BUCKET_NAME}
                            fi

                            /usr/local/bin/mc cp --recursive ${modelPath} myminio/${BUCKET_NAME}/
                        """
                    }
                }
            }
        }

        stage('–°–æ–∑–¥–∞–µ–º Dockerfile') {
            steps {
                script {
                    def dockerfileContent = """
                    FROM python:3.9-slim

                    ARG MINIO_URL
                    ARG BUCKET_NAME
                    ARG MODEL_NAME

                    ENV MINIO_URL=\${MINIO_URL}
                    ENV BUCKET_NAME=\${BUCKET_NAME}
                    ENV MODEL_NAME=\${MODEL_NAME}

                    WORKDIR /app

                    COPY . . 

                    CMD ["python", "app.py"]
                    """
                    writeFile file: 'Dockerfile', text: dockerfileContent
                    echo "Dockerfile —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
                }
            }
        }

        stage('–°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫–µ—Ä –æ–±—Ä–∞–∑') {
            steps {
                script {
                    def modelNameLower = env.MODEL_NAME.toLowerCase().replaceAll("[^a-z0-9_-]", "-")
                    def imageName = "ml-model-${modelNameLower}"
                    env.IMAGE_NAME = imageName // Update IMAGE_NAME for later use
                    sh """
                        docker build \
                            --build-arg MINIO_URL=${MINIO_URL} \
                            --build-arg BUCKET_NAME=${BUCKET_NAME} \
                            --build-arg MODEL_NAME=${env.MODEL_NAME} \
                            -t ${env.IMAGE_NAME}:${IMAGE_TAG} .
                    """
                    echo "–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω Docker –æ–±—Ä–∞–∑: ${env.IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('–°–∫–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é Trivy') {
            environment {
                // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ 'true' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ Trivy
                TRIVY_IGNORE_FAILURES = 'false'
            }
               stage('–°–∫–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é Trivy') {
            steps {
                script {
                    sh "mkdir -p trivy-reports"

                    sh """
                        echo "–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Trivy..."
                        trivy image --download-db-only

                        echo "–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞..."
                        trivy image --cache-dir /tmp/trivy \
                            --severity HIGH,CRITICAL \
                            --format table \
                            --scanners vuln \
                            ${env.IMAGE_NAME}:${IMAGE_TAG} > trivy-reports/scan-results.txt

                        trivy image --cache-dir /tmp/trivy \
                            --severity HIGH,CRITICAL \
                            --format json \
                            ${env.IMAGE_NAME}:${IMAGE_TAG} > trivy-reports/scan-results.json

                        echo "=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Trivy ==="
                        cat trivy-reports/scan-results.txt
                    """

                    // Copy Trivy reports to Git repository folder
                    sh "mkdir -p trivy_reports"
                    sh "cp trivy-reports/* trivy_reports/"

                    // Check for critical vulnerabilities
                    def hasCritical = sh(script: "grep -q 'CRITICAL' trivy-reports/scan-results.txt && echo true || echo false", returnStdout: true).trim()

                    if (hasCritical == "true") {
                        def userChoice = input message: 'üö® –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', ok: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', parameters: [choice(choices: '–ù–µ—Ç\n–î–∞', description: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', name: 'continueBuild')]
                        if (userChoice == '–ù–µ—Ç') {
                            error("–°–±–æ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.")
                        } else {
                            echo "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏."
                        }
                    } else {
                        echo "‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã."
                    }

                    archiveArtifacts artifacts: 'trivy-reports/**', fingerprint: true
                }
            }
        }

        // Following stages remain unchanged...
    }
}

        stage('–°—Ç–∞–≤–∏–º —Ç—ç–≥ –∏ –ø—É—à–∏–º –≤ Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASSWORD')]) {
                    script {
                        sh """
                            echo "$NEXUS_PASSWORD" | docker login -u "$NEXUS_USER" --password-stdin http://${REGISTRY}
                            
                            # –¢—ç–≥–∏—Ä—É–µ–º —Å –¥–∞—Ç–æ–π –∏ latest
                            docker tag ${env.IMAGE_NAME}:${IMAGE_TAG} ${REGISTRY}/${DOCKER_REPO_NAME}/${env.IMAGE_NAME}:${IMAGE_TAG}
                            docker tag ${env.IMAGE_NAME}:${IMAGE_TAG} ${REGISTRY}/${DOCKER_REPO_NAME}/${env.IMAGE_NAME}:latest
                            
                            # –ü—É—à–∏–º –æ–±–∞ —Ç—ç–≥–∞
                            docker push ${REGISTRY}/${DOCKER_REPO_NAME}/${env.IMAGE_NAME}:${IMAGE_TAG}
                            docker push ${REGISTRY}/${DOCKER_REPO_NAME}/${env.IMAGE_NAME}:latest
                        """
                        echo "–£—Å–ø–µ—à–Ω–æ –∑–∞–∫–∞—á–∞–ª–∏ –æ–±—Ä–∞–∑: ${env.IMAGE_NAME} –≤ Nexus"
                    }
                }
            }
        }

        stage('–ü—Ä–∏–±–∏—Ä–∞–µ–º—Å—è-)') {
            steps {
                script {
                    sh """
                        echo "–£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ..."
                        rm -rf models/${env.MODEL_NAME}

                        echo "–£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker –æ–±—Ä–∞–∑—ã..."
                        docker images -q ${env.IMAGE_NAME}:${IMAGE_TAG} | xargs -r docker rmi -f || true
                        docker images -q ${REGISTRY}/${DOCKER_REPO_NAME}/${env.IMAGE_NAME}:${IMAGE_TAG} | xargs -r docker rmi -f || true
                        docker images -q ${REGISTRY}/${DOCKER_REPO_NAME}/${env.IMAGE_NAME}:latest | xargs -r docker rmi -f || true
                        
                        echo "–£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç Trivy..."
                        rm -f trivy-results.txt
                    """
                    echo "–ü—Ä–∏–±—Ä–∞–ª–∏—Å—å! –õ—è–ø–æ—Ç–∞ —Ç–æ –∫–∞–∫–∞—è, –∫—Ä–∞—Å–æ—Ç–∞!"
                }
            }
        }
    } 
}
